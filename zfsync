#!/bin/bash
# Â©, 2022, Casey Witt
# utility to snapshot and mirror zfs datasets
# developed with zfs-0.8.3
# hosted at https://github.com/varasys/zfsync
# script linted with shellcheck (https://www.shellcheck.net/)
# initially meant to be posix sh compatable, but could not work out reliable enough error handling with posix sh

readonly VERSION="0.0.3"

set -Eeuo pipefail # fast fail on errors, undefined variables, and pipeline errors

declare -i ERR=0 # error counter (incremented when error function is called)
trap '((ERR++))' ERR
trap 'exit $ERR' EXIT # note that the connect function redefines this if it is called

# NOTES:
# `awk 'FNR <= 1'` does the same as `head -n 1` but prevents sigpipe errors from head closing the pipe before output is finished

readonly AUTOSNAPPROP="${AUTOSNAPPROP:-"com.sun:auto-snapshot"}" # dataset user property (set false to exclude dataset from snapshoting and backups)
readonly AUTOMIRRORPROP="${AUTOMIRRORPROP:-"${AUTOSNAPPROP}"}"
readonly SNAPPREFIX="${SNAPPREFIX:-"zfsync_"}" # prefix for snapshot name
readonly DATECMD="${DATECMD:-"date -u +%F_%H-%M-%S_UTC"}" # command to generate snapshot name timestamp

log() {
  local -r MSG="$1"; shift
  # shellcheck disable=2059 # allow variable in printf format string
  printf "\e[1m${MSG}\e[0m\n" "$@" >&2
}

warn() {
  local -r MSG="$1"; shift
  # shellcheck disable=2059 # allow variable in printf format string
  printf "\e[1m\e[35m${MSG}\e[0m\n" "$@" >&2
}

fatal() {
  local -r MSG="$1"; shift
  # shellcheck disable=2059 # allow variable in printf format string
  printf "\e[1m\e[31m${MSG}\e[0m\n" "$@" >&2
  ((ERR++))
  exit $ERR
}

declare ZFS
ZFS="$(command -v zfs)" || fatal 'fatal error: zfs command not found'
readonly ZFS

snapshot() {
  local SNAPSHOT
  SNAPSHOT="${SNAPPREFIX}$(${DATECMD})"
  #shellcheck disable=2207 # do not quote process substitution
  local -a SNAPSHOTS
  SNAPSHOTS=( $($ZFS list -Ho "name,${AUTOSNAPPROP}" -s name "$@" \
    | awk -v suf="@${SNAPSHOT}" '{ if ($2 != "false") print $1 suf }' \
    | uniq) )
  if [ ${#SNAPSHOTS[@]} -gt 0 ]; then
    $ZFS snapshot "${SNAPSHOTS[@]}"
    local SNAP
    for SNAP in "${SNAPSHOTS[@]}"; do
      $ZFS bookmark "${SNAP}" "${SNAP//\@/\#}"
    done
    $ZFS list -t snapshot,bookmark "${SNAPSHOTS[@]}" "${SNAPSHOTS[@]//\@/\#}"
  fi
}

connect() {
  if [ -z "${RPC:-}" ]; then # don't reconnect if $RPC is already defined
    local HOST SSH SOCKET
    HOST="$1"
    SSH="$(command -v ssh)" || fatal 'fatal error: ssh command not found'
    SOCKET="${HOME}/.ssh/zfsync_${HOST}_$(date +%s%N)"
    ${SSH} -fMN -S "${SOCKET}" "${HOST}"
    # shellcheck disable=2064 # expand HOST and SOCKET at definition time
    trap "
      # log 'disconnecting from ssh host: %s ...' '${HOST}'
      ${SSH} -S '${SOCKET}' -O exit '${HOST}' 2>/dev/null
      exit \$ERR
    " EXIT
    readonly RPC=$(printf '%s -o ControlMaster=no -S %s %s' "${SSH}" "${SOCKET}" "${HOST}")
    export RPC # need to export so subshells have access
  fi
}

configbuffer() {
  if [ -z "${BUFFER:-}" ]; then
    if ! BUFFER="$(command -v mbuffer) -s 128k -q"; then
      warn 'mbuffer executable not found'
      BUFFER="$(command -v cat)"
    fi
  fi
}

create_remote() {
  local SOURCE FIRST
  SOURCE="$1"
  FIRST=$($ZFS list -t snap -Ho name -s createtxg "${SOURCE}" | awk 'FNR <= 1')
  configbuffer
  $ZFS send -PLcew "${FIRST}" | $BUFFER | $RPC receive -sv "${SOURCE}"
}

resume_remote() {
  local SOURCE TOKEN
  SOURCE="$1"
  TOKEN="$2"
  configbuffer
  $ZFS send -Pe -t "${TOKEN}" | $BUFFER | $RPC receive -sv "${SOURCE}"
}

update_remote() {
  local SOURCE REMOTEGUID STARTSNAP CREATETXG
  SOURCE="$1"
  REMOTEGUID="$2"
  read -r STARTSNAP CREATETXG < <($ZFS list -Ho name,guid,createtxg -t snapshot -s createtxg "${SOURCE}" \
    | awk "\$2 == ${REMOTEGUID} { print \$1, \$3 }")
  if [ -z "${STARTSNAP}" ]; then # snapshot not found; so search bookmarks
    read -r STARTSNAP CREATETXG < <($ZFS list -Ho name,guid,createtxg -t bookmark -s createtxg "${SOURCE}" \
      | awk "\$2 == ${REMOTEGUID} { print \$1, \$3 }")
  fi
  if [ -z "${STARTSNAP}" ]; then
    fatal 'no snapshot or bookmark found for guid: %s' "${REMOTEGUID}"
  else
    local NEXTSNAP
    NEXTSNAP="$($ZFS list -t snap -Ho name,createtxg -s createtxg "${SOURCE}" \
      | awk "\$2 > $CREATETXG { print \$1; exit }")"
    if [ -n "${NEXTSNAP}" ]; then
      configbuffer
      $ZFS send -PLcew -i "${STARTSNAP}" "${NEXTSNAP}" | $BUFFER | $RPC receive -sv "${SOURCE}"
    else
      $RPC status "${SOURCE}"
    fi
  fi
}

mirror() {
  # shellcheck disable=2207 # don't quote process substitution
  local -a DATASETS
  DATASETS=( $($ZFS list -Ho "name,${AUTOMIRRORPROP}" -s name "$@" \
    | awk '{ if ($2 != "false") print $1 }') )
  local DATASET
  for DATASET in "${DATASETS[@]}"; do
    ( # operate in a subshell so fatel error will break/continue loop instead of exiting script
      log '\nmirroring %s ...' "${DATASET}"
      local STATUS
      STATUS="$($RPC status "${DATASET}")"
      until
        local GUID
        GUID="$($ZFS list -t snap -Ho guid -S createtxg "${DATASET}" | awk 'FNR <= 1')"
        [ -n "${GUID}" ] || fatal "error querying guid for %s" "${DATASET}"
        [ "${GUID}" = "${STATUS#guid=}" ] && log 'finished mirroring %s to %s' "${DATASET}" "${GUID}"
      do
        case "${STATUS}" in
          receive_resume_token=*)
            log 'resuming: %s ...' "${DATASET}"
            STATUS="$(resume_remote "${DATASET}" "${STATUS#receive_resume_token=}")" || fatal 'error resuming %s' "${DATASET}"
            ;;
          guid=*)
            log 'updating %s (%s => %s) ...' "${DATASET}" "${STATUS}" "${GUID}"
            STATUS="$(update_remote "${DATASET}" "${STATUS#guid=}")" || fatal 'error updating %s' "${DATASET}"
            ;;
          *)
            log 'creating: %s ...' "${DATASET}"
            STATUS="$(create_remote "${DATASET}")" || fatal 'error creating remote %s' "${DATASET}"
            ;;
        esac
      done
    ) || ERR=$?
  done
}

server() { # run from authorized_keys file on the backup server (ie. command="zfsync receive zpool/backups")
  local -a ARGS=( )
  [ -n "$1" ] || fatal 'zfsync server command requires dataset path prefix argument'
  local -r TARGET="$1" # the dataset path prefix including pool name (ie. zpool/backups)
  prepare() { # function to add local dataset prefix to datasets
    local -r OPTSTRING="$1" # getopts optstring of allowable flags (ie. ":rd:Ho:t:s:S:")
    shift
    ARGS=( "$@" )
    local OPTIND=1
    local OPT
    # the main reason to run getopts is to determine when the options end
    # in order to prefix all of the datasets with the TARGET prefix
    while getopts "${OPTSTRING}" OPT "${ARGS[@]}"; do
      case "${OPT}" in
        \?) fatal 'Invalid option: -%s' "${OPTARG}";;
        :) fatal 'Option -%s requires an argument' "${OPTARG}";;
      esac
    done
    # now that all options have been parsed, everything else must be prefixed
    if [ ${OPTIND} -gt $# ]; then
      ARGS+=( "${TARGET}" ) # no dataset was provided, so add TARGET as the dataset
    else # add TARGET prefix to everything after the options
      while [ ${OPTIND} -le $# ]; do
        ARGS[OPTIND-1]="${TARGET}/${ARGS[OPTIND-1]}"
        ((OPTIND++))
      done
    fi
  }
  # shellcheck disable=2086 # use word splitting below
  set -- ${SSH_ORIGINAL_COMMAND:-}
  local -r SUBCMD="${1:-}"
  [ $# -gt 0 ] && shift
  case "${SUBCMD}" in
    'status')
      local -r SOURCE="$1"
      local TOKEN
      TOKEN="$($ZFS list -Ho receive_resume_token "${TARGET}/${SOURCE}" 2>/dev/null)"
      if [ "${TOKEN}" = "-" ]; then # dataset exists so check for guid
        local GUID
        GUID="$($ZFS list -t snapshot -Ho guid -S createtxg "${TARGET}/${SOURCE}" | awk 'FNR <= 1')"
        if [ -n "${GUID}" ]; then
          TOKEN="guid=${GUID}" # respond with the guid
        else
          TOKEN="detached" # the dataset exists, but has no snapshots
        fi
      elif [ -n "${TOKEN}" ]; then # there is a resume token (which is not '-') so use it
        TOKEN="receive_resume_token=${TOKEN}"
      else
        TOKEN='missing' # the dataset does not exist
      fi
      printf '%s' "${TOKEN}"
      ;;
    'receive')
      configbuffer
      prepare ":Penvt:Fhsuo:x:dA" "$@"
      ${BUFFER} | $ZFS receive "${ARGS[@]}" >&2
      # shellcheck disable=2124 # use last item in array as string
      SSH_ORIGINAL_COMMAND="status ${@: -1}" server "${TARGET}" ;;
    'list')
      prepare ":rd:Hpo:t:s:S:" "$@"
      $ZFS list "${ARGS[@]}" ;;
    'send')
      prepare ":DLPRbcehnpvwi:I:" "$@"
      $ZFS send "${ARGS[@]}" ;;
    'destroy')
      prepare ":Rdfnprv" "$@"
      $ZFS destroy "${ARGS[@]}" ;;
    'prune')
      prepare ":frd:" "$@"
      prune "${ARGS[@]}" ;;
    'test')
      log 'authorized_keys configured for local user %s and prefix: %s' "$(id -un)" "${TARGET}" ;;
    *)
      fatal 'fatal error: unknown zfsync server command: %s\n' "${SSH_ORIGINAL_COMMAND:-}" ;;
  esac
}

configuser() {
  local -r USER="${1:-"zfsync"}"
  local -r HOMEDIR="${2:-"/usr/local/etc/zfsync"}"
  if id "${USER}" >/dev/null 2>&1; then
    warn 'user %s already exists' "${USER}"
  else
    useradd --home-dir "${HOMEDIR}" --no-create-home \
      --shell "$SHELL" --system "${USER}"
    log 'user %s created' "${USER}"
  fi
  if [ -d "${HOMEDIR}" ]; then
    warn 'home directory %s already exists' "${HOMEDIR}"
  else
    mkdir -p "${HOMEDIR}"
    chown "${USER}:${USER}" "${HOMEDIR}"
    log 'home directory %s created' "${HOMEDIR}"
  fi
  [ -L "${HOMEDIR}/ssh" ] || ln -s ".ssh" "${HOMEDIR}/ssh"
  if [ -f "${HOMEDIR}/.ssh/id_ed25519" ]; then
    warn 'ssh key %s already exists' "${HOMEDIR}/.ssh/id_ed25519"
  else
    mkdir -p -m 700 "${HOMEDIR}/.ssh"
    ssh-keygen -f "${HOMEDIR}/.ssh/id_ed25519" -t ed25519 -N ""
		chown -R "${USER}:${USER}" "${HOMEDIR}/.ssh"
    log 'ssh key %s created' "${HOMEDIR}/.ssh/id_ed25519"
  fi
}

allowsend() {
  local -r DATASET="${1:?"missing dataset argument"}"
  local -r USER="${2:-"zfsync"}"
  # shellcheck disable=2016 # don't expand command below
  id "${USER}" >/dev/null 2>&1 \
    || fatal 'user %s does not exist - consider running `%s configuser %s`' "${USER}" "$(basename "$0")"
  local -r PERMS="send,snapshot,bookmark,hold,mount,destroy"
  log "granting '%s' permissions to '%s' on dataset '%s'" "${PERMS}" "${USER}" "${DATASET}"
  $ZFS allow "${USER}" "${PERMS}" "${DATASET}"
  $ZFS allow "${DATASET}"
  # shellcheck disable=2016 # don't expand command below
  local -r HOMEDIR="$(su -c 'echo "$HOME"' - "${USER}")"
  if [ -f "${HOMEDIR}/.ssh/id_ed25519.pub" ]; then
    # shellcheck disable=2016 # don't execute command below
    warn 'use the following key with the `zfs allowreceive` command on the remote backup server:'
    cat "${HOMEDIR}/.ssh/id_ed25519.pub"
  else
    warn 'public key not found at: %s' "${HOMEDIR}/.ssh/id_ed25519"
  fi
}

allowreceive() {
  local -r DATASET="${1:?"missing dataset argument"}"
  local -r KEY="${2:?"missing ssh public key argument"}"
  local -r QUOTA="${3:-"none"}"
  local -r USER="${4:-"zfsync"}"
  # shellcheck disable=2016 # don't expand command below
  id "${USER}" >/dev/null 2>&1 \
    || fatal 'user %s does not exist - consider running `%s configuser %s`' "${USER}" "$(basename "$0")"
  local -r PERMS='receive,mount,create,userprop,encryption,canmount,mountpoint,compression,destroy,send,bookmark,keylocation,mount'
  if ! $ZFS list "${DATASET}" >/dev/null 2>&1; then
    warn 'creating dataset %s' "${DATASET}"
    $ZFS create -o mountpoint=none -p "${DATASET}"
  fi
  log "granting '%s' permission to '%s' on dataset '%s'" "${PERMS}" "${USER}" "${DATASET}"
  $ZFS allow "${USER}" "${PERMS}" "${DATASET}"
  $ZFS allow "${DATASET}"
  log "setting quota='%s' on dataset '%s'" "${QUOTA}" "${DATASET}"
  $ZFS set quota="${QUOTA}" "${DATASET}"
  local -r AUTHCMD="restrict,command=\"zfsync server ${DATASET}\" ${KEY}"
  # shellcheck disable=2016 # don't expand $HOME below
  local -r HOMEDIR="$(su -c 'echo "$HOME"' - "${USER}")"
  if grep -q "${AUTHCMD}" "${HOMEDIR}/.ssh/authorized_keys" 2>/dev/null; then
    log 'authorized_keys file already contains the specified key'
  elif grep "${KEY}" "${HOMEDIR}/.ssh/authorized_keys" 2>/dev/null; then
    warn '%s already contains the specified key; but may not be correct' "${HOMEDIR}/.ssh/authorized_keys"
    warn 'manually update with the following:'
    echo "${AUTHCMD}"
  else
    log 'updating %s' "${HOMEDIR}/.ssh/authorized_keys"
    echo "${AUTHCMD}" >> "${HOMEDIR}/.ssh/authorized_keys"
  fi
}

prune() {
  if [ "${1:-}" = '-f' ]; then # actually destroy snapshots
    local -r DESTROY="$ZFS destroy"; shift
  else # just do a dry run
    warn 'performing a dry run'
    warn 'bold snapshots (on stderr) will be retained'
    warn 'use the -f flag to destroy other snapshots (on stdout)'
    local -r DESTROY=":" # this is a noop
  fi

  compare() {
    local -r FORMAT="$1"
    local -r CURRENT="$2"
    local -r PREV="$3"
    # shellcheck disable=2086 # don't quote ARGS
    [ "$(date --date="@${CURRENT}" ${FORMAT})" = "$(date --date="@${PREV}" ${FORMAT})" ]
  }

  local -r NOW="$(date --date="${START:-$(date)}" +%s)" # define START as needed during debugging
  # time durations                # backup frequency buckets
  local -r SECOND=$((1))          # (ie. save hourly snapshots for 7 days)
  local -r MINUTE=$((60*SECOND))  # (ie. save daily snapshots for 4 weeks)
  local -r HOUR=$((60*MINUTE));   local -r FREQUENT=$((4*HOUR))
  local -r DAY=$((24*HOUR));      local -r HOURLY=$((7*DAY))
  local -r WEEK=$((7*DAY));       local -r DAILY=$((4*WEEK))
  local -r QUARTER=$((13*WEEK));  local -r WEEKLY=$((2*QUARTER))
  local -r YEAR=$((4*QUARTER));   local -r MONTHLY=$((6*YEAR))
                                  local -r YEARLY=$((10*YEAR))
  local -A PREV
  while read -r CREATION DATASET SNAPSHOT; do
    local NAME="${DATASET}@${SNAPSHOT}"
    local PRUNE=false
    if [ "${PREV[DATASET]:-}" = "${DATASET}" ]; then
      local AGE=$((NOW-CREATION))
      if [ ${AGE} -lt ${FREQUENT} ]; then # save everything
        : # keep everything
      elif [ ${AGE} -lt ${HOURLY} ]; then # save last in each hour
        compare "+%Y-%m-%d_%H" "${CREATION}" "${PREV[CREATION]}" && PRUNE=true
      elif [ ${AGE} -lt ${DAILY} ]; then # save last in each day
        compare "+%Y-%m-%d" "${CREATION}" "${PREV[CREATION]}" && PRUNE=true
      elif [ ${AGE} -lt ${WEEKLY} ]; then # save last in each week
        compare "+%Y-%U" "${CREATION}" "${PREV[CREATION]}" && PRUNE=true
      elif [ ${AGE} -lt ${MONTHLY} ]; then # save last in each month
        compare "+%Y-%m" "${CREATION}" "${PREV[CREATION]}" && PRUNE=true
      elif [ ${AGE} -lt ${YEARLY} ]; then # save last in each year
        compare "+%Y" "${CREATION}" "${PREV[CREATION]}" && PRUNE=true
      fi # then save everything over 10 years
    fi
    if [ "${PRUNE}" = true ]; then
      echo "${NAME}"
      $DESTROY "${NAME}" || ERR=$((ERR+1))
    else
      log '%s' "${NAME}"
    fi
    PREV=( [CREATION]="$CREATION" [DATASET]="$DATASET" [SNAPSHOT]="$SNAPSHOT" )
  done < <( # need this to be in a subshell so the while loop can increment ERR
    # the awk command below takes two columns input and splits into three columns output (on \t and @)
    # the sort command sorts by name in reverse, then by creation in reverse numerically
    $ZFS list -t snapshot -Hpo creation,name "$@" \
      | awk -F '\t|@' '{ print $1, $2, $3 }' \
      | sort -k 2,2r -k 1,1nr
  )
}

run_as_root() {
  if [ "$(id -u)" -ne 0 ]; then
    warn "restarting as root ..."
    exec sudo -E "$0" "$@"
  else
    "$@"
  fi
}

readonly CMD="${1:-}"
[ $# -gt 0 ] && shift
case "${CMD}" in
  'snap'|'snapshot')
    # help: \nsnapshot: create new snapshot(s)
    # help:   zfsync snapshot [-r|-d depth] <dataset> ...
    snapshot "$@" ;;
  'mirror')
    # help: \nmirror: mirror snapshot(s) to remote server
    # help:   zfsync mirror <destination> [-r|-d depth] <dataset> ...
    HOST="${1:?"missing hostname argument"}"; shift
    connect "${HOST}"
    mirror "$@" ;;
  'backup')
    # help: \nbackup: run `snap` and then `mirror` in a single command
    # help:   zfsync backup <destination> [-r|-d depth] <dataset> ...
    HOST="${1:?"missing hostname argument"}"; shift
    snapshot "$@"
    connect "${HOST}"
    mirror "$@" ;;
  'prune')
    # help: \nprune: prune old snapshots
    # help:   zfsync prune [-r|-d depth] [dataset]...
    prune "$@" ;;
  'rprune')
    # help: \nrprune: prune old snapshots on remote backup server
    # help:   zfsync rprune <destination> [-r|-d depth] [dataset]...
    HOST="${1:?"missing hostname argument"}"; shift
    connect "${HOST}"
    $RPC prune "$@" ;;
  'server')
    # help: \nserver: run in server mode on the backup host (from .ssh/authorized_keys file)
    # help:   zfsync server <dataset_root>
    server "$@" ;;
  'list')
    # help: \nlist: run `zfs list` remotely on backup server (ie. query the backup server from the client)
    # help:   zfsync list <destination> [options] <dataset> ...
    HOST="${1:?"missing hostname argument"}"; shift
    connect "${HOST}"
    $RPC list "$@" ;;
  'destroy')
    # help: \ndestroy: run `zfs destroy` remotely on backup server (ie. destroy dataset on server from the client)
    # help:   zfsync destroy <destination> [options] <dataset>
    HOST="${1:?"missing hostname argument"}"; shift
    connect "${HOST}"
    $RPC destroy "$@" ;;
  'recover')
    # help: \nrecover: run `zfs send` remotely on backup server (ie. to restore a snaphshot from the backup server)
    # help:   zfsync recover <destination> [options] <dataset>
    HOST="${1:?"missing hostname argument"}"; shift
    connect "${HOST}"
    $RPC send "$@" ;;
  'configuser')
    # help: \nconfiguser: create zfsync user, /usr/local/etc/zfsync directory, and /usr/local/etc/zfsync/id_ed25519 ssh key
    # help:   zfsync configuser [username] [home_dir]
    run_as_root configuser "$@" ;;
  'allowsend')
    # help: \nallowsend: delegate zfs permissions to zfsync user to be able to send dataset (on client)
    # help:   zfsync allowsend <dataset> [username]
    run_as_root allowsend "$@" ;;
  'allowreceive')
    # help: \nallowreceive: delegate zfs permissions to zfsync user to be able to receive into dataset (on server)
    # help:   zfsync allowreceive <dataset> <key> [quota] [username]
    run_as_root allowreceive "$@" ;;
  'version')
    echo "zfsync-${VERSION}" ;;
  *)
    [ "${CMD}" = "-?" ] || $(fatal "fatal error: unknown command%s" "${CMD:+": \`${CMD}\`"}") || : # use subshell to prevent script from exiting
    log 'zfsync is a shell script to create and mirror zfs snapshots.\nusage:'
    grep '# help: ' "$0" | grep -v 'grep' | sed 's/ *# help: //g' | sed 's/\\n/\n/g'
    # shellcheck disable=2016 # don't expand command below
    log '\nsee `man zfsync` for more information'
    ;;
esac
